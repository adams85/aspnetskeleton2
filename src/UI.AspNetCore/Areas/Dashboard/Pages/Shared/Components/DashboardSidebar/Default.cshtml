@using static Models.Layout.DashboardSidebarModel

@model Models.Layout.DashboardPageLayoutModel

@inject Infrastructure.RuntimeCompilationAwareValueCache<List<NavigationGroup>> DefaultGroupCache

@{
    var (isVisible, isMinimized) = GetSidebarState(ViewContext.HttpContext);
}

<div class="c-sidebar c-sidebar-dark c-sidebar-fixed @(isVisible ? "c-sidebar-lg-show" : null) @(isMinimized ? "c-sidebar-minimized" : null)" id="sidebar">
    <div class="c-sidebar-brand">
        <div class="c-sidebar-brand-full">
            <div class="logo-wrapper d-flex flex-row">
                <div class="logo-text flex-grow-1 text-center">
                    <span>AspNet</span><br /><strong>Skeleton</strong>
                </div>
            </div>
        </div>
        <div class="c-sidebar-brand-minimized">
            <img class="logo-img" src="~/images/logo-dark.png" alt="Logo" />
        </div>
    </div>

    <ul class="c-sidebar-nav">
        @{ await RenderSidebarNavGroupsAsync(Model.Sidebar.Groups ?? DefaultGroups); }
    </ul>
    <button class="c-sidebar-minimizer c-class-toggler" type="button" data-target="_parent" data-class="c-sidebar-minimized"></button>
</div>

@functions {
    List<NavigationGroup> DefaultGroups => DefaultGroupCache.GetOrCreate(() => new List<NavigationGroup>
    {
        new NavigationGroup
        {
            Items =
            {
                new NavigationItem(IndexModel.PageDescriptor) { IconCssClass = "fa-tachometer" },
            }
        },
        new NavigationGroup
        {
            GetTitle = (httpContext, t) => t["Administrators"],
            IsVisibleAsync = httpContext => Task.FromResult(httpContext.User.IsInRole(nameof(RoleEnum.Administrators))),
            Items =
            {
                new NavigationItem(Settings.IndexModel.PageDescriptor) { IconCssClass = "fa-wrench" },
            }
        }
    });
}

@functions {
    async Task RenderSidebarNavGroupsAsync(List<NavigationGroup> groups)
    {
        @for (int i = 0, n = groups.Count; i < n; i++)
        {
            var group = groups[i];

            if (group.IsVisibleAsync != null && !await group.IsVisibleAsync(ViewContext.HttpContext))
                continue;

            @if (group.GetTitle != null)
            {
                <li class="c-sidebar-nav-title">@group.GetTitle(ViewContext.HttpContext, T)</li>
            }

            await RenderSidebarNavItemsAsync(group.Items);
        }
    }

    async Task RenderSidebarNavItemsAsync(List<NavigationItemBase> items)
    {
        for (int i = 0, n = items.Count; i < n; i++)
        {
            var itemBase = items[i];

            if (itemBase.IsVisibleAsync != null && !await itemBase.IsVisibleAsync(ViewContext.HttpContext))
                continue;

            if (itemBase is NavigationItem item)
            {
                RenderSidebarNavItem(item);
            }
            else if (itemBase is NavigationDropDownItem dropDownItem)
            {
                await RenderSidebarNavDropDownAsync(dropDownItem);
            }
        }
    }

    void RenderSidebarNavItem(NavigationItem item)
    {
        var isActive = item.IsActive(ViewContext.HttpContext, Model.PageDescriptor);
        <li class="c-sidebar-nav-item">
            <a class="c-sidebar-nav-link @(isActive ? "c-active" : null)" href="@item.GetUrl(Url)">
                @if (item.IconCssClass != null)
                {
                    <i class="fa @item.IconCssClass c-sidebar-nav-icon" aria-hidden="true"></i>
                }
                @item.GetTitle(ViewContext.HttpContext, T)
            </a>
        </li>
    }

    async Task RenderSidebarNavDropDownAsync(NavigationDropDownItem item)
    {
        var isShown = item.IsShown(ViewContext.HttpContext, Model.PageDescriptor);
        <li class="c-sidebar-nav-item c-sidebar-nav-dropdown @(isShown ? "c-show" : null)">
            <a class="c-sidebar-nav-link c-sidebar-nav-dropdown-toggle" href="#">
                @if (item.IconCssClass != null)
                {
                    <i class="fa @item.IconCssClass c-sidebar-nav-icon" aria-hidden="true"></i>
                }
                @item.GetTitle(ViewContext.HttpContext, T)
            </a>

            <ul class="c-sidebar-nav-dropdown-items">
                @{ await RenderSidebarNavItemsAsync(item.Items); }
            </ul>
        </li>
    }
}
