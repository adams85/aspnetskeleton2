@using WebApp.UI.Models.DataTables
@using WebApp.UI.Areas.Dashboard.Models.Settings

@model ListSettingsQuery

@inject IGlobalRazorHelpers<IDataTableHelpers> DataTableHelpers

@{
    var tableModel = (SettingsTableModel)ViewData[nameof(SettingsTableModel)];

    var tableDefinition = tableModel.ToTableDefinition();

    tableDefinition.GenerateQueryUrl = (url, values) => url.RouteUrl(SettingsRouteName, values);

    tableDefinition.OrderByFormFieldName = Html.NameFor(m => m.OrderBy);

    tableDefinition.Columns = new List<DataTableColumnDefinition<SettingData>>(3)
{
        new DataTableColumnDefinition<SettingData>(tableDefinition, s_nameProperty)
        {
            AscendingOrderIconCssClass = "fa-sort-alpha-asc",
            DescendingOrderIconCssClass = "fa-sort-alpha-desc",
            Filter = new DataTableColumnFilter.Text
            {
                FormFieldName = Html.NameFor(m => m.NamePattern),
                FormFieldValue = Model.NamePattern
            }
        },
        new DataTableColumnDefinition<SettingData>(tableDefinition, s_valueProperty)
        {
            AscendingOrderIconCssClass = "fa-sort-alpha-asc",
            DescendingOrderIconCssClass = "fa-sort-alpha-desc",
            Filter = new DataTableColumnFilter.Text
            {
                FormFieldName = Html.NameFor(m => m.ValuePattern),
                FormFieldValue = Model.ValuePattern
            }
        },
        new DataTableColumnDefinition<SettingData>(tableDefinition, s_descriptionProperty)
        {
            AscendingOrderIconCssClass = "fa-sort-alpha-asc",
            DescendingOrderIconCssClass = "fa-sort-alpha-desc",
            Filter = new DataTableColumnFilter.Text
            {
                FormFieldName = Html.NameFor(m => m.DescriptionPattern),
                FormFieldValue = Model.DescriptionPattern
            },
            DataCellTemplate = @<td class="font-weight-light">@GetDescription(item.Data)</td>
        },
    };

    DataTableHelpers.Instance.Table(tableDefinition);
}

@functions {
    private static readonly ModelPropertyMetadata<SettingData> s_nameProperty = new ModelPropertyMetadata<SettingData>(m => m.Name);
    private static readonly ModelPropertyMetadata<SettingData> s_valueProperty = new ModelPropertyMetadata<SettingData>(m => m.Value);
    private static readonly ModelPropertyMetadata<SettingData> s_descriptionProperty = new ModelPropertyMetadata<SettingData>(m => m.Description);

    private static LocalizedHtmlString GetDescription(SettingData data) =>
        new LocalizedHtmlString(data.Description, data.Description, false, data.DefaultValue, data.MinValue, data.MaxValue);
}
