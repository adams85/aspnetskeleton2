@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Routing
@using WebApp.UI.Models.DataTables

@inherits Microsoft.AspNetCore.Mvc.Razor.RazorPage
@implements IDataTableHelpers

@functions {
    // tag helpers will need the following pragmas (https://github.com/dotnet/aspnetcore/issues/20055)
    //#pragma warning disable MVC1006
    //#pragma warning disable 1998

    public void Table<TItem>(DataTableDefinition<TItem> tableDefinition)
    {
        if (tableDefinition.TableTemplate != null)
        {
            @tableDefinition.TableTemplate(tableDefinition)
            return;
        }

        var items = tableDefinition.Result.Items;

        <!form method="get" action="@tableDefinition.GenerateQueryUrl(Url, null)">
            <table class="table table-bordered table-striped table-hover data-table">
                <thead>
                    @{
                        if (tableDefinition.ShowTableHeaderRow)
                        {
                            TableHeaderRow(tableDefinition);
                        }

                        if (tableDefinition.ShowColumnHeaderRow)
                        {
                            ColumnHeaderRow(tableDefinition);
                        }

                        if (tableDefinition.ShowColumnFilterRow)
                        {
                            ColumnFilterRow(tableDefinition);
                        }
                    }
                </thead>

                <tbody>
                    @if (items?.Length > 0)
                    {
                        for (int i = 0, n = items.Length; i < n; i++)
                        {
                            DataRow(items[i], tableDefinition);
                        }
                    }
                    else
                    {
                        NoDataRow(tableDefinition);
                    }
                </tbody>
            </table>
        </!form>
    }

    #region Header

    public void TableHeaderRow<TItem>(DataTableDefinition<TItem> tableDefinition)
    {
        if (tableDefinition.HeaderRowTemplate != null)
        {
            @tableDefinition.HeaderRowTemplate(tableDefinition)
            return;
        }

        <tr class="table-header-row">
            <th colspan="@tableDefinition.Columns.Count">
                <div class="d-flex">
                    <div class="flex-grow-1"></div>
                    <div>
                        <button class="btn btn-primary btn-sm" type="submit">@T["Refresh"]</button>
                    </div>
                </div>
            </th>
        </tr>
    }

    public void ColumnHeaderRow<TItem>(DataTableDefinition<TItem> tableDefinition)
    {
        if (tableDefinition.ColumnHeaderRowTemplate != null)
        {
            @tableDefinition.ColumnHeaderRowTemplate(tableDefinition)
            return;
        }

        var columns = tableDefinition.Columns;

        <tr class="column-header-row">
            @for (int i = 0, n = columns.Count; i < n; i++)
            {
                ColumnHeader(columns[i]);
            }
        </tr>
    }

    public void ColumnHeader<TItem>(DataTableColumnDefinition<TItem> columnDefinition)
    {
        if (columnDefinition.HeaderTemplate != null)
        {
            @columnDefinition.HeaderTemplate(columnDefinition)
            return;
        }

        var title = columnDefinition.Title ?? columnDefinition.Property.GetDisplayName(Html.MetadataProvider);
        string currentOrderingKeyPath;

        <th>
            @if (columnDefinition.IsSortable && (currentOrderingKeyPath = columnDefinition.OrderingKeyPath ?? columnDefinition.Property.Path) != null)
            {
                var (isActiveOrderingColumn, currentOrderingDescending, newOrderingKeyPath, newOrderingDescending) =
                    GetOrderingState(currentOrderingKeyPath, columnDefinition.Table.QueryOrderingComponents);

                var formFieldName = columnDefinition.Table.OrderByFormFieldName;
                var routeValues = CreateRouteValues(ViewContext.HttpContext.Request.Query, formFieldName, newOrderingKeyPath, newOrderingDescending);

                <div>
                    <a class="title" href="@columnDefinition.Table.GenerateQueryUrl(Url, routeValues)">@title</a>
                    @if (isActiveOrderingColumn)
                    {
                        <input type="hidden" name="@formFieldName" value="@QueryableHelper.ComposeOrderingComponent(currentOrderingKeyPath, currentOrderingDescending)" />
                        var orderIconCssClass = currentOrderingDescending ? columnDefinition.DescendingOrderIconCssClass : columnDefinition.AscendingOrderIconCssClass;
                        if (orderIconCssClass != null)
                        {
                            <i class="sort-order fa @(orderIconCssClass) ml-1" aria-hidden="true"></i>
                        }
                    }
                </div>
            }
            else
            {
                <div>
                    <span class="title">@title</span>
                </div>
            }
        </th>

        static (bool, bool, string?, bool) GetOrderingState(string currentOrderingKeyPath, (string, bool)[] orderingComponents)
        {
            if (orderingComponents.Length > 0)
            {
                var (keyPath, descending) = orderingComponents[0];

                if (currentOrderingKeyPath.Equals(keyPath, StringComparison.OrdinalIgnoreCase))
                {
                    if (descending)
                        return (true, descending, null, default);

                    return (true, descending, currentOrderingKeyPath, true);
                }
            }

            return (false, default, currentOrderingKeyPath, false);
        }

        static RouteValueDictionary CreateRouteValues(IQueryCollection queryString, string? formFieldName, string? orderingKeyPath, bool orderingDescending)
        {
            var routeValues = new RouteValueDictionary();
            routeValues.Merge(queryString);

            if (formFieldName != null)
            {
                @if (orderingKeyPath != null)
                {
                    routeValues[formFieldName] = QueryableHelper.ComposeOrderingComponent(orderingKeyPath, orderingDescending);
                }
                else
                {
                    routeValues.Remove(formFieldName);
                }
            }

            return routeValues;
        }
    }

    public void ColumnFilterRow<TItem>(DataTableDefinition<TItem> tableDefinition)
    {
        if (tableDefinition.ColumnFilterRowTemplate != null)
        {
            @tableDefinition.ColumnFilterRowTemplate(tableDefinition)
            return;
        }

        var columns = tableDefinition.Columns;

        <tr class="column-filter-row">
            @for (int i = 0, n = columns.Count; i < n; i++)
            {
                ColumnFilter(columns[i]);
            }
        </tr>
    }

    public void ColumnFilter<TItem>(DataTableColumnDefinition<TItem> columnDefinition)
    {
        if (columnDefinition.FilterTemplate != null)
        {
            @columnDefinition.FilterTemplate(columnDefinition)
            return;
        }

        <th>
            @switch (columnDefinition.Filter)
            {
                case DataTableColumnFilter.Text textColumnFilter:
                    TextColumnFilter(textColumnFilter, columnDefinition);
                    break;
                case null:
                    break;
                default:
                    throw new NotSupportedException($"No default render function is defined for filter type {columnDefinition.Filter.GetType()}.");
            }
        </th>
    }

    public void TextColumnFilter<TItem>(DataTableColumnFilter.Text columnFilter, DataTableColumnDefinition<TItem> columnDefinition)
    {
        <div>
            <input class="form-control form-control-sm" type="text" name="@columnFilter.FormFieldName" value="@columnFilter.FormFieldValue" placeholder="@(columnFilter.PlaceholderText ?? T["Filter text"])" />
        </div>
    }

    #endregion

    #region Data

    public void DataRow<TItem>(TItem item, DataTableDefinition<TItem> tableDefinition)
    {
        if (tableDefinition.DataRowTemplate != null)
        {
            @tableDefinition.DataRowTemplate((item, tableDefinition))
            return;
        }

        var columns = tableDefinition.Columns;

        <tr class="data-row">
            @for (int i = 0, n = columns.Count; i < n; i++)
            {
                DataCell(item, columns[i]);
            }
        </tr>
    }

    public void DataCell<TItem>(TItem item, DataTableColumnDefinition<TItem> columnDefinition)
    {
        if (columnDefinition.DataCellTemplate != null)
        {
            @columnDefinition.DataCellTemplate((item, columnDefinition))
            return;
        }

        <td>@columnDefinition.Property.GetValue(item)</td>
    }

    public void NoDataRow<TItem>(DataTableDefinition<TItem> tableDefinition)
    {
        if (tableDefinition.NoDataRowTemplate != null)
        {
            @tableDefinition.NoDataRowTemplate(tableDefinition)
            return;
        }

        <tr class="no-data-row">
            <td class="text-center" colspan="@tableDefinition.Columns.Count">
                @T["No data to display."]
            </td>
        </tr>
    }

    #endregion
}
