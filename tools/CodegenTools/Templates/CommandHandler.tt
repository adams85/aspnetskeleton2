﻿<#@ template language="C#" inherits="CommandTemplateBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using <#= $"{Namespace}.Core.Helpers" #>;
using <#= $"{Namespace}.DataAccess.Entities" #>;

namespace <#= $"{Namespace}.Service.{Group}" #>
{
    internal sealed class <#= $"{Name}CommandHandler" #> : CommandHandler<<#= $"{Name}Command" #>>
    {
        public override async Task HandleAsync(<#= $"{Name}Command" #> command, CommandContext context, CancellationToken cancellationToken)
        {
            await using (context.CreateDbContext().AsAsyncDisposable(out var dbContext).ConfigureAwait(false))
            {
                Entity entity = await dbContext.Entities
                    .FindAsync(new object[] { command.Id }, cancellationToken).ConfigureAwait(false);

                RequireExisting(entity, c => c.Id);

                // ...
<#
if (IsEventProducer)
{
#>

                command.OnEvent?.Invoke(command, new ProgressEvent
                {
                    Progress = 1f
                });
<#
}
#>

                await dbContext.SaveChangesAsync(cancellationToken).ConfigureAwait(false);
<#
if (IsKeyGenerator)
{
#>

                command.OnKeyGenerated?.Invoke(command, entity.Id);
<#
}
#>
            }
        }
    }
}
