﻿<#@ template language="C#" inherits="QueryTemplateBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using <#= $"{Namespace}.Core.Helpers" #>;
using <#= $"{Namespace}.DataAccess.Entities" #>;

namespace <#= $"{Namespace}.Service.{Group}" #>
{
<#
var resultType = GetResultType();
#>
    internal sealed class <#= $"{Name}QueryHandler" #> : <#= GetQueryHandlerBaseType(resultType) #>
    {
        public override async Task<<#= resultType #>> HandleAsync(<#= $"{Name}Query" #> query, QueryContext context, CancellationToken cancellationToken)
        {
            await using (context.CreateDbContext().AsAsyncDisposable(out var dbContext).ConfigureAwait(false))
            {
<#
if (!IsList)
{
#>
                Entity entity = await dbContext.Entities
                    .FindAsync(new object[] { query.Id }, cancellationToken).ConfigureAwait(false);

                RequireExisting(entity, q => q.Id);

                // ...
<#
    if (IsEventProducer)
    {
#>

                query.OnEvent?.Invoke(query, new ProgressEvent
                {
                    Progress = 1f
                });
<#
    }
#>

                return new <#= resultType #>
                {
                };
<#
} 
else 
{
#>
                IQueryable<Entity> entityQuery = dbContext.Entities;

                // ...
<#
    if (IsEventProducer)
    {
#>

                query.OnEvent?.Invoke(query, new ProgressEvent
                {
                    Progress = 1f
                });
<#
    }
#>

                var entityDataQuery = entityQuery.ToData();

                return await ResultAsync(query, entityDataQuery, cancellationToken).ConfigureAwait(false);
<#
}
#>
        }
    }
}
